name: Test

on:
  push:
    tags:
      - "v*.*.*"

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 8
  RUSTFLAGS: "-D warnings -W unreachable-pub"
  RUSTUP_MAX_RETRIES: 8
  FETCH_DEPTH: 0 # pull in the tags for the version string
  MACOSX_DEPLOYMENT_TARGET: 10.15
  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
  CARGO_TARGET_ARM_UNKNOWN_LINUX_GNUEABIHF_LINKER: arm-linux-gnueabihf-gcc

jobs:
  dist:
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            code-target: win32-x64
          # - os: windows-latest
          #   target: i686-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            code-target: win32-arm64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            code-target: linux-x64
            container: rockylinux:8
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            code-target: linux-arm64
          - os: ubuntu-latest
            target: arm-unknown-linux-gnueabihf
            code-target: linux-armhf
          - os: macos-14
            target: x86_64-apple-darwin
            code-target: darwin-x64
          - os: macos-14
            target: aarch64-apple-darwin
            code-target: darwin-arm64

    name: dist (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    env:
      RA_TARGET: ${{ matrix.target }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ env.FETCH_DEPTH }}

      - name: Install toolchain dependencies
        if: matrix.container == 'rockylinux:8'
        shell: bash
        run: |
          dnf install -y gcc
          curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused -fsSL "https://sh.rustup.rs" | sh -s -- --profile minimal --default-toolchain none -y
          echo "${CARGO_HOME:-$HOME/.cargo}/bin" >> $GITHUB_PATH

      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update stable
          rustup target add ${{ matrix.target }}
          rustup component add rust-src

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Update apt repositories
        if: matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'arm-unknown-linux-gnueabihf'
        run: sudo apt-get update

      - name: Install AArch64 target toolchain
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get install gcc-aarch64-linux-gnu

      - name: Install ARM target toolchain
        if: matrix.target == 'arm-unknown-linux-gnueabihf'
        run: sudo apt-get install gcc-arm-linux-gnueabihf

      - name: Dist
        working-directory: ./server
        run: cargo build --target ${{ matrix.target }} --release

      - name: Copy result to target directory (Windows)
        if: matrix.code-target == 'win32-x64' || matrix.code-target == 'win32-arm64'
        run: cp ./server/target/${{ matrix.target }}/release/lsp-server.exe ./lsp-server.exe

      - name: Copy result to target directory (Linux, MacOS)
        if: matrix.code-target != 'win32-x64' && matrix.code-target != 'win32-arm64'
        run: cp ./server/target/${{ matrix.target }}/release/lsp-server ./lsp-server

      - run: npm ci
        working-directory: .

      - name: Create directory /dist
        run: mkdir -p ./dist

      - name: Package Extension (main)
        run: npx vsce package -o "./dist/eson-analyzer-${{ matrix.code-target }}.vsix" --target ${{ matrix.code-target }} --pre-release
        working-directory: .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.target }}
          path: ./dist

  publish:
    name: publish
    runs-on: ubuntu-latest
    needs: ["dist"]
    steps:
      - name: Install Nodejs
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - run: echo "TAG=$(date --iso -u)" >> $GITHUB_ENV
        if: github.ref == 'refs/heads/release'
      - run: echo "TAG=beta" >> $GITHUB_ENV
        if: github.ref != 'refs/heads/release'
      - run: 'echo "TAG: $TAG"'

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ env.FETCH_DEPTH }}

      - run: echo "HEAD_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
      - run: 'echo "HEAD_SHA: $HEAD_SHA"'

      - uses: actions/download-artifact@v4
        with:
          name: dist-aarch64-apple-darwin
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-x86_64-apple-darwin
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-x86_64-unknown-linux-gnu
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-aarch64-unknown-linux-gnu
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-arm-unknown-linux-gnueabihf
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-x86_64-pc-windows-msvc
          path: dist
      # - uses: actions/download-artifact@v4
      #   with:
      #     name: dist-i686-pc-windows-msvc
      #     path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-aarch64-pc-windows-msvc
          path: dist
      # - uses: actions/download-artifact@v4
      #   with:
      #     name: dist-x86_64-unknown-linux-musl
      #     path: dist
      - run: ls -al ./dist

      # https://github.com/marketplace/actions/gh-release
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: "dist/*"

      # - name: Publish Release
      #   uses: ./.github/actions/github-release
      #   with:
      #     files: "dist/*"
      #     name: ${{ env.TAG }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
